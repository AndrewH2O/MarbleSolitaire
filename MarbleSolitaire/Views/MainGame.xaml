<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:helpers="clr-namespace:MarbleSolitaire.ViewHelpers"
        xmlns:vm="clr-namespace:MarbleSolitaireViewModel.ViewModel;assembly=MarbleSolitaireViewModel"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity" xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions" mc:Ignorable="d" x:Class="MarbleSolitaire.Views.MainGame"
        ResizeMode="NoResize" WindowStyle="None" AllowsTransparency="True" 
        
    Title="Marble Solitaire" Width="570" Height="570"  >
    <Window.Resources>

        <!-- ~~~~~~~~~~~~~~~~~ end Piece dataType ~~~~~~~~~~~~~~~~~ -->

        <!--<SolidColorBrush x:Key="SelectedBrush" Color="#FF034403"/>-->

        <BooleanToVisibilityConverter x:Key="booleanToVisibilityConverter"/>
        <helpers:BooleanToOpacityConverter x:Key="booleanToOpacityConverter"/>
        <helpers:IntConverter x:Key="intConverter"/>
        <vm:GameViewModel x:Key="viewModel"/>

        <!--REMOVE CONVERTER FOR DUBUGGING ONLY-->
        <helpers:DummyConverter x:Key="dummyConverter"/>
        <SolidColorBrush x:Key="GameBoardBgBrush" Color="Transparent"/>
        <SolidColorBrush x:Key="PieceBrush" Color="Green"/>
        
		<!--<RadialGradientBrush x:Key="HasPieceBrush" RadiusY="0.552" RadiusX="0.552" GradientOrigin="0.5,0.5" Center="0.5,0.5">
			<GradientStop Color="#E2E64646" Offset="0"/>
			<GradientStop Color="#FFBB7031" Offset="0.257"/>
			<GradientStop Color="#FF57411B" Offset="0.417"/>
			<GradientStop Color="#FF1F1606" Offset="0.904"/>
			<GradientStop Color="#FFD3A666" Offset="0.696"/>
			<GradientStop Color="#FF441111" Offset="0.652"/>
			<GradientStop Color="#FF765D27" Offset="0.174"/>
			<GradientStop Color="#FFD88585" Offset="0.352"/>
		</RadialGradientBrush>-->
        <LinearGradientBrush x:Key="HasPieceBrush" EndPoint="0.26,0.088" MappingMode="RelativeToBoundingBox" StartPoint="0.858,1.053">
            <GradientStop Color="#FFDA3434" Offset="0.12"/>
            <GradientStop Color="#FFCB9292" Offset="0.925"/>
        </LinearGradientBrush>
        
		<SolidColorBrush x:Key="HasSpaceBrush" Color="Transparent"/>
        <SolidColorBrush x:Key="HighlightSourceBrush" Color="#FF939312"/>
        <!--<SolidColorBrush x:Key="SelectedBrush" Color="#FFDE3939"/>-->
        <SolidColorBrush x:Key="SelectedBrush" Color="#E561611A"/>
        <SolidColorBrush x:Key="SourceCandidateBrush" Color="#FFDE3939"/>
        <SolidColorBrush x:Key="JumpCandidateBrush" Color="#FFCF8D57"/>
        <SolidColorBrush x:Key="TargetCandidateBrush" Color="#BF267DD3"/>
        <SolidColorBrush x:Key="DefaultPieceHighlight" Color="#33272706"/>
        <SolidColorBrush x:Key="ClickedOnBtnBrush" Color="Yellow"/>
        <SolidColorBrush x:Key="SelectorPieceBrush" Color="#FFC9E22C"/>

        <SolidColorBrush x:Key="TextH1" Color="#B2C9C91E"/>
        <SolidColorBrush x:Key="TextH2" Color="#B2C9C91E"/>

        <Color x:Key="EffectOverPieceColor" R="25" B="25" G="25"/>

        

        <Style x:Key="cleanBtnStyle" BasedOn="{StaticResource CleanButtonStyle}" TargetType="{x:Type Button}">
        	<Setter Property="FocusVisualStyle" Value="{StaticResource CleanButtonFocusStyle}"/>
        	<Setter Property="VerticalContentAlignment" Value="Center"/>
        	<Setter Property="HorizontalContentAlignment" Value="Center"/>
        	<Setter Property="HorizontalAlignment" Value="Left"/>
        	<Setter Property="FontSize" Value="14"/>
        	<Setter Property="Height" Value="38"/>
        	<Setter Property="VerticalAlignment" Value="Top"/>
        	<Setter Property="HorizontalAlignment" Value="Left"/>
        	<Setter Property="BorderBrush" Value="#FF538537"/>
        	<Setter Property="Background" Value="#FFCFB7B7"/>
        	<Setter Property="Foreground" Value="#FF5FD3A9"/>
        	<Setter Property="FontWeight" Value="ExtraBold"/>
        </Style>

        <!-- ~~~~~~~~~~~~~~~~~ start of Piece inner UI ~~~~~~~~~~~~~~~~~ -->
        <ControlTemplate x:Key="BtnTemplate1" TargetType="{x:Type Button}">
        	<Grid>
        		<Ellipse x:Name="highlightPiece" Margin="-1" StrokeThickness="2" Fill="{StaticResource DefaultPieceHighlight}"/>
        		<Ellipse x:Name="circlePiece" Fill="{TemplateBinding Property=Background}" 
        			Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
        			Height="{Binding ActualWidth, RelativeSource={RelativeSource Self}}" StrokeThickness="2" />

        		<ContentPresenter Margin="{TemplateBinding Property=Padding}" 
        			HorizontalAlignment="Center" VerticalAlignment="Center"/>
        	</Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter TargetName="circlePiece" Property="Effect" >
                        <Setter.Value>
                            <DropShadowEffect BlurRadius="10" 
                                            ShadowDepth="0" Color="{StaticResource EffectOverPieceColor}"/>
                        </Setter.Value>
                    </Setter>
                </Trigger>

                <Trigger Property="helpers:ShowSourceStateAP.ShowSourceState" Value="True">
                    <Setter TargetName="highlightPiece" Property="Stroke" Value="{StaticResource HighlightSourceBrush}"/>
                </Trigger>
                <!--<Trigger Property="IsSelected" Value="True">
                    <Setter TargetName="circlePiece" 
                		Property="Fill" 
                		Value="{StaticResource ClickedOnBtnBrush}"/>

                </Trigger>-->

            </ControlTemplate.Triggers>
        </ControlTemplate>
        
        
        
        
        
        <ControlTemplate x:Key="BtnTemplate0" TargetType="{x:Type Button}">
        	<Grid>
        		<Ellipse x:Name="highlightPiece" Margin="-1" StrokeThickness="2" Fill="{StaticResource DefaultPieceHighlight}"/>
        		<Ellipse x:Name="circlePiece" Fill="{TemplateBinding Property=Background}" 
        			Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
        			Height="{Binding ActualWidth, RelativeSource={RelativeSource Self}}" StrokeThickness="2" />

        		<ContentPresenter Margin="{TemplateBinding Property=Padding}" 
        			HorizontalAlignment="Center" VerticalAlignment="Center"/>
        	</Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter TargetName="circlePiece" Property="Effect" >
                        <Setter.Value>
                            <DropShadowEffect BlurRadius="10" 
                                            ShadowDepth="0" Color="{StaticResource EffectOverPieceColor}"/>
                        </Setter.Value>
                    </Setter>
                </Trigger>

                <Trigger Property="helpers:ShowSourceStateAP.ShowSourceState" Value="True">
                    <Setter TargetName="highlightPiece" Property="Stroke" Value="{StaticResource HighlightSourceBrush}"/>
                </Trigger>
                <!--<Trigger Property="IsSelected" Value="True">
                    <Setter TargetName="circlePiece" 
                		Property="Fill" 
                		Value="{StaticResource ClickedOnBtnBrush}"/>

                </Trigger>-->

            </ControlTemplate.Triggers>
        </ControlTemplate>
        <!-- ~~~~~~~~~~~~~~~~~ end of Piece inner UI ~~~~~~~~~~~~~~~~~ -->


        <Style x:Key="BtnPieceStyle" TargetType="{x:Type Button}">
        	<Setter Property="VerticalAlignment" Value="Stretch"/>
        	<Setter Property="HorizontalAlignment" Value="Stretch"/>
        	<Setter Property="Margin" Value="4"/>
        	<Setter Property="Template" Value="{StaticResource BtnTemplate0}"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Content}" Value="1">
                    <Setter Property="Background" Value="{StaticResource HasPieceBrush}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Content}" Value="0">
                    <Setter Property="Background" Value="{StaticResource HasSpaceBrush}"/>
                </DataTrigger>
                <!--<DataTrigger Binding="{Binding IsSelected}" Value="true">
                    <Setter Property="Background" Value="{StaticResource SelectedBrush}"/>
                </DataTrigger>-->
                <DataTrigger Binding="{Binding IsSourceCandidate}" Value="true">
                    <Setter Property="helpers:ShowSourceStateAP.ShowSourceState" Value="True"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding IsJumpCandidate}" Value="true">
                    <Setter Property="Background" Value="{StaticResource JumpCandidateBrush}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding IsTargetCandidate}" Value="true">
                    <Setter Property="Background" Value="{StaticResource TargetCandidateBrush}"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!-- ~~~~~~~~~~~~~~~~~ start Piece dataType ~~~~~~~~~~~~~~~~~ -->

        <DataTemplate DataType="{x:Type vm:Piece}" x:Key="PieceDataTemplateDesignTimeEdit">
        	<Grid Margin="0">
        		<Button Content="" 
        			Style="{StaticResource BtnPieceStyle}"
        			Foreground="Black" >
        			
        		</Button>
        		<TextBlock Margin="1" Text="{Binding Index}" 
        			HorizontalAlignment="Right" 
        			Foreground="#FF32A9CC"
        			VerticalAlignment="Bottom" FontSize="10"/>
        		<!--<TextBlock Margin="1" Text="{Binding Index, Converter={StaticResource intConverter}}" 
                           HorizontalAlignment="Left" 
                           Foreground="#FF3E45CC"
                           VerticalAlignment="Top" FontSize="10"/>-->
        	</Grid>
        </DataTemplate>
        <!-- ~~~~~~~~~~~~~~~~~ start of Piece outer UI ~~~~~~~~~~~~~~~~~ -->

        <Style x:Key="ItemContainerStylePieceOuter" TargetType="{x:Type ListBoxItem}">
        	<Setter Property="Canvas.Left" Value="{Binding XPos}"/>
        	<Setter Property="Canvas.Top" Value="{Binding YPos}"/>
        	<Setter Property="Width" Value="{Binding SideLengthPiece}"/>
        	<Setter Property="Height" Value="{Binding SideLengthPiece}"/>
        	<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        	<Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <!--<Setter Property="FocusManager.IsFocusScope" Value="True"/>-->
        	<Setter Property="Background" Value="Blue"/>
        	<Setter Property="Template">
        		<Setter.Value>
        			<ControlTemplate TargetType="{x:Type ListBoxItem}">
        				<Grid>
        					<Ellipse x:Name="selectedPiece" Margin="-2" StrokeThickness="2" />
        					<ContentPresenter 
        						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
        						HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
        						VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        				</Grid>
        				<ControlTemplate.Triggers>
        					<Trigger Property="IsSelected" Value="true">
        						<Setter Property="Stroke" TargetName="selectedPiece" 
        							Value="{StaticResource SelectorPieceBrush}"/>
        					</Trigger>
        				</ControlTemplate.Triggers>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
            <Style.Triggers>
                <Trigger Property="IsKeyboardFocusWithin" Value="True">
                    <Setter Property="IsSelected" Value="True"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- ~~~~~~~~~~~~~~~~~ end of Piece UI outer ~~~~~~~~~~~~~~~~~ -->
        
        <Style TargetType="{x:Type ListBox}">
            <Setter Property="ItemsPanel">
                <Setter.Value>
                    <ItemsPanelTemplate>
                        <Canvas 
                            Width="{Binding SideLengthBoard}" 
                            Height="{Binding SideLengthBoard}" 
                            MinHeight="350" MinWidth="350" 
                            ClipToBounds="True"
                            Background="Transparent"/>
                    </ItemsPanelTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    	<Storyboard x:Key="waitingAnimation" AutoReverse="False" RepeatBehavior="Forever">
    		<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ellipse">
    			<EasingDoubleKeyFrame KeyTime="0:0:0.8" Value="-90">
    				<EasingDoubleKeyFrame.EasingFunction>
    					<CubicEase EasingMode="EaseInOut"/>
    				</EasingDoubleKeyFrame.EasingFunction>
    			</EasingDoubleKeyFrame>
    		</DoubleAnimationUsingKeyFrames>
    		<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="path">
    			<EasingDoubleKeyFrame KeyTime="0:0:0.8" Value="-90">
    				<EasingDoubleKeyFrame.EasingFunction>
                        <ExponentialEase EasingMode="EaseIn"/>
    				</EasingDoubleKeyFrame.EasingFunction>
    			</EasingDoubleKeyFrame>
    		</DoubleAnimationUsingKeyFrames>
    	</Storyboard>


    </Window.Resources>
	<Window.Triggers>
		<EventTrigger RoutedEvent="FrameworkElement.Loaded">
			<BeginStoryboard Storyboard="{StaticResource waitingAnimation}"/>
		</EventTrigger>
	</Window.Triggers>
    <Window.CommandBindings>
        <CommandBinding Command="ApplicationCommands.Close"
                        Executed="CmdClose"/>
    </Window.CommandBindings>
    <Window.Template>
        <ControlTemplate x:Name="WindowTmplt" TargetType="{x:Type Window}">
        	<Grid>
        		<Ellipse Margin="10" Fill="#AA0B0B0C"/>
        		<Path MouseLeftButtonDown="CmdDragMove" Margin="10" Data="M333,425 C319.74518,425 309,435.74518 309,449 309,462.25482 319.74518,473 333,473 346.25482,473 357,462.25482 357,449 357,435.74518 346.25482,425 333,425 z M275,425 C261.74518,425 251,435.74518 251,449 251,462.25482 261.74518,473 275,473 288.25482,473 299,462.25482 299,449 299,435.74518 288.25482,425 275,425 z M217,425 C203.74516,425 193,435.74518 193,449 193,462.25482 203.74516,473 217,473 230.25484,473 241,462.25482 241,449 241,435.74518 230.25484,425 217,425 z M333,367 C319.74518,367 309,377.74518 309,391 309,404.25482 319.74518,415 333,415 346.25482,415 357,404.25482 357,391 357,377.74518 346.25482,367 333,367 z M275,367 C261.74518,367 251,377.74518 251,391 251,404.25482 261.74518,415 275,415 288.25482,415 299,404.25482 299,391 299,377.74518 288.25482,367 275,367 z M217,367 C203.74516,367 193,377.74518 193,391 193,404.25482 203.74516,415 217,415 230.25484,415 241,404.25482 241,391 241,377.74518 230.25484,367 217,367 z M449,309 C435.74518,309 425,319.74518 425,333 425,346.25482 435.74518,357 449,357 462.25482,357 473,346.25482 473,333 473,319.74518 462.25482,309 449,309 z M391,309 C377.74518,309 367,319.74518 367,333 367,346.25482 377.74518,357 391,357 404.25482,357 415,346.25482 415,333 415,319.74518 404.25482,309 391,309 z M333,309 C319.74518,309 309,319.74518 309,333 309,346.25482 319.74518,357 333,357 346.25482,357 357,346.25482 357,333 357,319.74518 346.25482,309 333,309 z M275,309 C261.74518,309 251,319.74518 251,333 251,346.25482 261.74518,357 275,357 288.25482,357 299,346.25482 299,333 299,319.74518 288.25482,309 275,309 z M217,309 C203.74516,309 193,319.74518 193,333 193,346.25482 203.74516,357 217,357 230.25484,357 241,346.25482 241,333 241,319.74518 230.25484,309 217,309 z M159,309 C145.74516,309 135,319.74518 135,333 135,346.25482 145.74516,357 159,357 172.25484,357 183,346.25482 183,333 183,319.74518 172.25484,309 159,309 z M101,309 C87.745163,309 77,319.74518 77,333 77,346.25482 87.745163,357 101,357 114.25484,357 125,346.25482 125,333 125,319.74518 114.25484,309 101,309 z M449,251 C435.74518,251 425,261.74518 425,275 425,288.25482 435.74518,299 449,299 462.25482,299 473,288.25482 473,275 473,261.74518 462.25482,251 449,251 z M391,251 C377.74518,251 367,261.74518 367,275 367,288.25482 377.74518,299 391,299 404.25482,299 415,288.25482 415,275 415,261.74518 404.25482,251 391,251 z M333,251 C319.74518,251 309,261.74518 309,275 309,288.25482 319.74518,299 333,299 346.25482,299 357,288.25482 357,275 357,261.74518 346.25482,251 333,251 z M275,251 C261.74518,251 251,261.74518 251,275 251,288.25482 261.74518,299 275,299 288.25482,299 299,288.25482 299,275 299,261.74518 288.25482,251 275,251 z M217,251 C203.74516,251 193,261.74518 193,275 193,288.25482 203.74516,299 217,299 230.25484,299 241,288.25482 241,275 241,261.74518 230.25484,251 217,251 z M159,251 C145.74516,251 135,261.74518 135,275 135,288.25482 145.74516,299 159,299 172.25484,299 183,288.25482 183,275 183,261.74518 172.25484,251 159,251 z M101,251 C87.745163,251 77,261.74518 77,275 77,288.25482 87.745163,299 101,299 114.25484,299 125,288.25482 125,275 125,261.74518 114.25484,251 101,251 z M449,193 C435.74518,193 425,203.74516 425,217 425,230.25484 435.74518,241 449,241 462.25482,241 473,230.25484 473,217 473,203.74516 462.25482,193 449,193 z M391,193 C377.74518,193 367,203.74516 367,217 367,230.25484 377.74518,241 391,241 404.25482,241 415,230.25484 415,217 415,203.74516 404.25482,193 391,193 z M333,193 C319.74518,193 309,203.74516 309,217 309,230.25484 319.74518,241 333,241 346.25482,241 357,230.25484 357,217 357,203.74516 346.25482,193 333,193 z M275,193 C261.74518,193 251,203.74516 251,217 251,230.25484 261.74518,241 275,241 288.25482,241 299,230.25484 299,217 299,203.74516 288.25482,193 275,193 z M217,193 C203.74516,193 193,203.74516 193,217 193,230.25484 203.74516,241 217,241 230.25484,241 241,230.25484 241,217 241,203.74516 230.25484,193 217,193 z M159,193 C145.74516,193 135,203.74516 135,217 135,230.25484 145.74516,241 159,241 172.25484,241 183,230.25484 183,217 183,203.74516 172.25484,193 159,193 z M101,193 C87.745163,193 77,203.74516 77,217 77,230.25484 87.745163,241 101,241 114.25484,241 125,230.25484 125,217 125,203.74516 114.25484,193 101,193 z M333,135 C319.74518,135 309,145.74516 309,159 309,172.25484 319.74518,183 333,183 346.25482,183 357,172.25484 357,159 357,145.74516 346.25482,135 333,135 z M275,135 C261.74518,135 251,145.74516 251,159 251,172.25484 261.74518,183 275,183 288.25482,183 299,172.25484 299,159 299,145.74516 288.25482,135 275,135 z M217,135 C203.74516,135 193,145.74516 193,159 193,172.25484 203.74516,183 217,183 230.25484,183 241,172.25484 241,159 241,145.74516 230.25484,135 217,135 z M333,77 C319.74518,77 309,87.745163 309,101 309,114.25484 319.74518,125 333,125 346.25482,125 357,114.25484 357,101 357,87.745163 346.25482,77 333,77 z M275,77 C261.74518,77 251,87.745163 251,101 251,114.25484 261.74518,125 275,125 288.25482,125 299,114.25484 299,101 299,87.745163 288.25482,77 275,77 z M217,77 C203.74516,77 193,87.745163 193,101 193,114.25484 203.74516,125 217,125 230.25484,125 241,114.25484 241,101 241,87.745163 230.25484,77 217,77 z M275,0 C426.8783,0 550,123.1217 550,275 550,426.8783 426.8783,550 275,550 123.1217,550 0,426.8783 0,275 0,123.1217 123.1217,0 275,0 z" Stretch="Fill">
        			<Path.Fill>
        				<RadialGradientBrush Opacity="0.9">
        					<GradientStop Color="Black" Offset="0.07"/>
        					<GradientStop Color="#FF0F171F" Offset="0.839"/>
        					<GradientStop Color="#FF2B343D" Offset="0.748"/>
        					<GradientStop Color="#FF506273" Offset="0.813"/>
        					<GradientStop Color="#FF181B1D" Offset="0.874"/>
        					<GradientStop Color="#FF1C3444" Offset="0.965"/>
        					<GradientStop Color="#FF171B20" Offset="0.63"/>
        				</RadialGradientBrush>
        			</Path.Fill>
        		</Path>
        		<ContentPresenter/>
        	</Grid>

        </ControlTemplate>
    </Window.Template>
	<Border Width="490" Height="490" MouseLeftButtonDown="CmdDragMove">
		<VisualStateManager.VisualStateGroups>
			<VisualStateGroup x:Name="VisualStateGroup"/>
		</VisualStateManager.VisualStateGroups>
		<Grid x:Name="RootContainer" 
			DataContext="{StaticResource viewModel}" 
          
			Margin="10">

			<!--Visibility="Visible"-->
			<i:Interaction.Triggers>
				<ei:DataTrigger Binding="{Binding IsSolving}" Value="False">
					<ei:ControlStoryboardAction ControlStoryboardOption="Stop" Storyboard="{StaticResource waitingAnimation}"/>
				</ei:DataTrigger>
				<ei:DataTrigger Binding="{Binding IsSolving}" Value="True">
					<ei:ControlStoryboardAction Storyboard="{StaticResource waitingAnimation}"/>
				</ei:DataTrigger>
			</i:Interaction.Triggers>

			<StackPanel>
				<Label Height="Auto" FontSize="36" Foreground="{StaticResource TextH1}" HorizontalAlignment="Center" Content="Peg Solitaire" Margin="0,-35,0,0">
					<Label.Effect>
						<DropShadowEffect ShadowDepth="3" RenderingBias="Quality"/>
					</Label.Effect>
				</Label>
			</StackPanel>
            <!--Do not need Piece datatemplate below to have an x:key but by assigning to ItemTemplate makes it blendable-->
			<ListBox x:Name="gameBoard" 
				BorderThickness="0"
				Padding="5" Background="{StaticResource GameBoardBgBrush}"
				FocusManager.IsFocusScope="True"
				ItemsSource="{Binding Pieces, UpdateSourceTrigger=PropertyChanged}" 
				SelectedIndex="{Binding CurrentIndex, Converter={StaticResource dummyConverter}}" 
				ItemContainerStyle="{StaticResource ItemContainerStylePieceOuter}" HorizontalAlignment="Center" VerticalAlignment="Center" HorizontalContentAlignment="Center" Foreground="#FF295B0D"	         
				ItemTemplate="{StaticResource PieceDataTemplateDesignTimeEdit}"
				 />

			<Button Style="{StaticResource cleanBtnStyle}" Margin="47,4,0,0" 
				Command="{Binding NewGameCmd}"
				Content="_New"
				Padding="0,0,0,2"
				Height="40" Width="64" />

			<Button Style="{StaticResource cleanBtnStyle}" Margin="403,31,27,0" HorizontalAlignment="Center"
				VerticalContentAlignment="Center"
				HorizontalContentAlignment="Center"
				Command="ApplicationCommands.Close"
				Content="_X"
				Height="40" Width="40" />

			<Button Style="{StaticResource cleanBtnStyle}" Margin="10,55,0,0"
				Visibility="{Binding IsUndoRedoBtnHidden, Converter={StaticResource booleanToVisibilityConverter}}"
				IsEnabled="{Binding IsUndoCmdEnabled}"
				VerticalContentAlignment="Center"
				Command="{Binding GetUndoCmd}"
				FontFamily="Segoe UI Symbol"
				Content="_&#xE10E;"
				Height="40" Width="40" />
			<Button Style="{StaticResource cleanBtnStyle}" Margin="55,55,0,0"
				Visibility="{Binding IsUndoRedoBtnHidden, Converter={StaticResource booleanToVisibilityConverter}}"
				IsEnabled="{Binding IsRedoCmdEnabled}"
				VerticalContentAlignment="Center"
				Command="{Binding GetRedoCmd}"
				FontFamily="Segoe UI Symbol"
				Content="_&#xE10D;"
				Height="40" Width="40"/>

			<StackPanel Opacity="{Binding IsWin, Converter={StaticResource booleanToOpacityConverter}}" 
				Orientation="Horizontal" 
				VerticalAlignment="Top" 
				HorizontalAlignment="Center" 
				Margin="0,451,0,-15">
				<StackPanel.Effect>
					<DropShadowEffect ShadowDepth="1" BlurRadius="2"/>
				</StackPanel.Effect>
				<Label Content="Pieces left:"  Width="Auto" FontSize="18" Foreground="{StaticResource TextH2}" VerticalContentAlignment="Center"/>
				<Label Content="{Binding PiecesCount, StringFormat=\{0:D\}}" Width="30" FontSize="18" Foreground="{StaticResource TextH2}" VerticalContentAlignment="Center"/>
			</StackPanel>

			<TextBlock Visibility="{Binding IsWin, Converter={StaticResource booleanToVisibilityConverter}}" Text="Well done you did it!" FontSize="30" VerticalAlignment="Center" HorizontalAlignment="Center" FontWeight="Bold" Foreground="#FFC9E22C" RenderTransformOrigin="0.5,0.5" >
				<TextBlock.Effect>
					<DropShadowEffect BlurRadius="10" Direction="280" ShadowDepth="2" Color="#FF061D05"/>
				</TextBlock.Effect>
				<TextBlock.RenderTransform>
					<TransformGroup>
						<ScaleTransform/>
						<SkewTransform/>
						<RotateTransform/>
						<TranslateTransform Y="100"/>
					</TransformGroup>
				</TextBlock.RenderTransform>
			</TextBlock>
			<Canvas x:Name="HintsContainer" Background="{x:Null}" Margin="10,0,-10,0">
				<Button Style="{StaticResource cleanBtnStyle}"
					Visibility="{Binding IsHintBtnHidden, Converter={StaticResource booleanToVisibilityConverter}}"
					Command="{Binding GetHintCmd}"
					FontFamily="Segoe UI Symbol"
					VerticalContentAlignment="Center"
					HorizontalContentAlignment="Center"
					Padding="0,0,2,0"
					Content="_&#xE11B;"
					Height="40"  Width="45" Canvas.Left="-31" Canvas.Top="105" />
				<!--Visibility="{Binding ShowHintInfo, Converter={StaticResource booleanToVisibilityConverter}}"-->
				<!--Visibility="Visible"-->
				<StackPanel 
					Visibility="{Binding ShowHintInfo, Converter={StaticResource booleanToVisibilityConverter}}"
					Orientation="Horizontal"
					VerticalAlignment="Top" 
					HorizontalAlignment="Right" Canvas.Left="17" Canvas.Top="108">
					<StackPanel.Background>
						<LinearGradientBrush EndPoint="0.5,1" MappingMode="RelativeToBoundingBox" StartPoint="0.5,0" Opacity="0.8">
							<GradientStop Color="#FF141719" Offset="0.984"/>
							<GradientStop Color="#FF273D40"/>
						</LinearGradientBrush>
					</StackPanel.Background>
					<Label Content="Move: " Height="30" Width="Auto"  Foreground="{StaticResource TextH2}" FontSize="18" Padding="2" />
					<Label Content="{Binding HintIndexNextPieceToMove, StringFormat=\{0:D\}}" Width="35"  Foreground="{StaticResource TextH2}" FontSize="18" Padding="2"/>
					<Label Content="{Binding HintDirectionPieceToMove}"  FontFamily="Wingdings" Foreground="{StaticResource TextH2}" FontSize="18" />
				</StackPanel>
			</Canvas>

            <!--Visibility="{Binding IsSolving, Converter={StaticResource booleanToVisibilityConverter}}" >-->
			<Canvas x:Name="solvingAnimatable" 
				Visibility="{Binding IsSolving, Converter={StaticResource booleanToVisibilityConverter}}" RenderTransformOrigin="0.5,0.5" >
				<Canvas.RenderTransform>
					<TransformGroup>
						<ScaleTransform/>
						<SkewTransform/>
						<RotateTransform/>
						<TranslateTransform/>
					</TransformGroup>
				</Canvas.RenderTransform>
				<Ellipse x:Name="ellipse" Height="300" Canvas.Left="86" Canvas.Top="85" Width="300" StrokeThickness="8" RenderTransformOrigin="0.5,0.5">
					<Ellipse.RenderTransform>
						<TransformGroup>
							<ScaleTransform/>
							<SkewTransform/>
							<RotateTransform/>
							<TranslateTransform/>
						</TransformGroup>
					</Ellipse.RenderTransform>
					<Ellipse.Stroke>
						<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
							<GradientStop Color="Black" Offset="0.265"/>
							<GradientStop Color="#DD2B6C3A" Offset="0.8"/>
						</LinearGradientBrush>
					</Ellipse.Stroke>
				</Ellipse>
				<Path x:Name="path" Data="M123,145 L226.5,236.5" Height="102.14" Canvas.Left="122.404" Stretch="Fill" StrokeThickness="10" Canvas.Top="140.39" Width="116.768" StrokeEndLineCap="Round" RenderTransformOrigin="0.959,0.946">
					<Path.Stroke>
						<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
							<GradientStop Color="Black" Offset="0"/>
							<GradientStop Color="#DD42B45C" Offset="1"/>
						</LinearGradientBrush>
					</Path.Stroke>
					<Path.RenderTransform>
						<TransformGroup>
							<ScaleTransform/>
							<SkewTransform/>
							<RotateTransform Angle="296.68"/>
							<TranslateTransform X="0.021" Y="-2.369"/>
						</TransformGroup>
					</Path.RenderTransform>
					<Path.Fill>
						<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
							<GradientStop Color="Black" Offset="0"/>
							<GradientStop Color="#FFBD5E5E" Offset="1"/>
						</LinearGradientBrush>
					</Path.Fill>
				</Path>
				<TextBlock Text="Solving" Canvas.Left="147.316" Canvas.Top="251.625" Foreground="Cornsilk" FontSize="48"/>
			</Canvas>
		</Grid>
	</Border>
</Window>
